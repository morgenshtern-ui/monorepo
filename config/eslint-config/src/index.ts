/* eslint-disable node/prefer-global/process */
import pluginPlaywright from 'eslint-plugin-playwright'
import { type FlatConfigItem, GLOB_SRC_EXT, antfu, test } from '@antfu/eslint-config'

interface Options {
  tsconfigPath?: string[] | string | undefined
}

// const defaultOptions: Options = {
//   tsconfigPath: 'tsconfig.eslint.json',
// }

export default async function make({
  tsconfigPath
}: Options): Promise<FlatConfigItem[]> {
  const result: FlatConfigItem[] = await antfu({
    javascript: {
      overrides: {
        'array-callback-return': ['error', { allowImplicit: false, allowVoid: false, checkForEach: false }],
        'arrow-body-style': 'off', // TODO: enable?
        'camelcase': ['error', { allow: ['^UNSAFE_'], ignoreDestructuring: false, ignoreImports: false, properties: 'never' }],
        'capitalized-comments': 'off',
        'class-methods-use-this': ['error', { exceptMethods: [] }],
        'complexity': 'off',
        'consistent-return': 'off', // TODO: enable?
        'consistent-this': ['error', 'self'],
        'curly': ['error', 'all'],
        'default-case': ['error', { commentPattern: '^no default$' }],
        'default-param-last': 'error',
        'for-direction': 'off',
        'func-name-matching': 'off',
        'func-names': ['error', 'as-needed'],
        'func-style': 'off', // TODO: enable?
        'getter-return': ['error', { allowImplicit: false }], // TODO: ts
        'grouped-accessor-pairs': ['error', 'getBeforeSet'],
        'guard-for-in': 'error',
        'id-denylist': 'off',
        'id-length': 'off',
        'id-match': 'off',
        'import/extensions': ['error', 'always', { ignorePackages: true }],
        // 'init-declarations': 'off', // TODO: enable?
        'line-comment-position': 'off',
        'logical-assignment-operators': ['error', 'always'],
        'max-classes-per-file': ['error', 1],
        'max-depth': 'off',
        'max-lines': 'off',
        'max-lines-per-function': 'off',
        'max-nested-callbacks': 'off',
        'max-params': 'off',
        'max-statements': 'off',
        'multiline-comment-style': 'off',
        'no-await-in-loop': 'error',
        'no-bitwise': ['error', { allow: ['~'] }],
        'no-constant-binary-expression': 'error',
        'no-constant-condition': ['error', { checkLoops: false }],
        'no-constructor-return': 'error',
        'no-continue': 'off', // TODO: enable?
        'no-div-regex': 'error',
        'no-dupe-else-if': 'error',
        'no-duplicate-imports': 'off', // handled by `import/no-duplicates` TODO:
        'no-else-return': ['error', { allowElseIf: false }],
        'no-empty-function': ['error', { allow: ['arrowFunctions', 'functions', 'methods'] }],
        'no-empty-static-block': 'error',
        'no-eq-null': 'off',
        'no-extra-label': 'error',
        'no-implicit-coercion': ['error', {
          allow: ['!!', '~', '+'],
        }],
        'no-implicit-globals': 'error',
        'no-inline-comments': 'off',
        'no-inner-declarations': ['error', 'both'],
        'no-invalid-this': 'error',
        'no-label-var': 'error',
        'no-lonely-if': 'off', // TODO: enable?
        'no-loop-func': 'error',
        'no-magic-numbers': 'off',
        'no-multi-assign': 'error',
        'no-negated-condition': 'off',
        'no-nested-ternary': 'off',
        'no-new-native-nonconstructor': 'off', // TODO:
        'no-nonoctal-decimal-escape': 'error',
        'no-object-constructor': 'error',
        'no-param-reassign': 'off', // TODO: enable
        'no-plusplus': ['off', { allowForLoopAfterthoughts: true }], // TODO: enable?
        'no-promise-executor-return': 'error',
        'no-restricted-exports': ['off', { restrictedNamedExports: ['default'] }], // TODO: enable?
        'no-restricted-imports': [
          'error',
          {
            patterns: ['**/node_modules/*'],
          },
        ],
        'no-return-assign': ['error', 'always'],
        'no-script-url': 'error',
        'no-setter-return': 'error',
        'no-shadow': 'error',
        'no-ternary': 'off',
        'no-undefined': 'off',
        'no-underscore-dangle': 'off',
        'no-unsafe-optional-chaining': ['error', { disallowArithmeticOperators: true }],
        'no-unused-labels': 'error',
        'no-unused-private-class-members': 'error',
        'no-useless-concat': 'error',
        'no-useless-escape': 'off',
        'no-void': 'error',
        'no-warning-comments': 'off',
        'operator-assignment': ['error', 'always'],
        'prefer-destructuring': 'off', // TODO: enable?
        'prefer-named-capture-group': 'off',
        'prefer-numeric-literals': 'error',
        'prefer-object-has-own': 'error',
        'prefer-object-spread': 'error',
        'radix': ['error', 'as-needed'],
        // 'sort-keys': 'off',
        'require-atomic-updates': 'error',
        'require-await': 'off',
        'require-unicode-regexp': 'off',
        'require-yield': 'error',
        // 'sort-vars': 'off',
        'strict': ['error', 'never'],
      },
    },
    overrides: {
      stylistic: {
        'style/padding-line-between-statements': [
          'error',
          { blankLine: 'always', next: 'return', prev: '*' },
          { blankLine: 'always', next: ['for', 'if', 'do', 'while', 'function'], prev: '*' },
          { blankLine: 'always', next: '*', prev: ['for', 'if', 'do', 'while'] },
          { blankLine: 'always', next: '*', prev: ['const', 'let', 'var'] },
          { blankLine: 'any', next: ['const', 'let', 'var'], prev: ['const', 'let', 'var'] },
        ],
      },
    },

    stylistic: true,

    test: false,

    typescript: {
      overrides: {
        'class-methods-use-this': 'off',
        'default-param-last': 'off',
        'no-array-constructor': 'off',
        'no-invalid-this': 'off',
        'no-loop-func': 'off',
        'no-magic-numbers': 'off',
        'no-shadow': 'off',
        'no-unused-expressions': 'off',
        'no-unused-vars': 'off',
        'no-useless-constructor': 'off',
        'require-await': 'off',
        'ts/adjacent-overload-signatures': 'error',
        'ts/array-type': 'off',
        'ts/class-literal-property-style': 'error',
        'ts/class-methods-use-this': 'error',
        'ts/consistent-generic-constructors': 'error',
        'ts/consistent-indexed-object-style': 'off',
        'ts/consistent-type-assertions': 'error',
        'ts/default-param-last': 'error',
        'ts/explicit-function-return-type': 'off',
        'ts/explicit-member-accessibility': ['error', { accessibility: 'explicit' }],
        'ts/explicit-module-boundary-types': 'off',
        // 'ts/init-declarations': 'off', // TODO: enable?
        'ts/member-ordering': 'error',
        // 'init-declarations': 'off',
        'ts/method-signature-style': 'error',
        'ts/no-array-constructor': 'error',
        'ts/no-base-to-string': 'error',
        // 'ts/consistent-type-exports': 'error',
        'ts/no-confusing-non-null-assertion': 'error',
        'ts/no-confusing-void-expression': 'error',
        'ts/no-duplicate-enum-values': 'error',
        'ts/no-duplicate-type-constituents': 'error',
        'ts/no-empty-function': 'off',
        'ts/no-empty-interface': 'off',
        // 'ts/no-dynamic-delete': 'error',
        'ts/no-extra-non-null-assertion': 'error',
        'ts/no-floating-promises': 'error',
        'ts/no-for-in-array': 'error',
        // 'ts/no-invalid-void-type': 'error',
        'ts/no-loop-func': 'error',
        'ts/no-magic-numbers': 'off',
        'ts/no-meaningless-void-operator': 'error',
        'ts/no-misused-new': 'error',
        'ts/no-misused-promises': 'error',
        'ts/no-mixed-enums': 'error',
        'ts/no-namespace': 'error',
        'ts/no-non-null-asserted-nullish-coalescing': 'error',
        'ts/no-non-null-asserted-optional-chain': 'error',
        'ts/no-non-null-assertion': 'warn',
        'ts/no-redundant-type-constituents': 'error',
        'ts/no-shadow': 'error',
        'ts/no-this-alias': 'error',
        'ts/no-unnecessary-boolean-literal-compare': 'error',
        'ts/no-unnecessary-condition': 'off', // TODO: enable?
        // 'ts/no-unnecessary-qualifier': 'error',
        'ts/no-unnecessary-type-constraint': 'error',
        'ts/no-unsafe-argument': 'off', // TODO: disabled
        'ts/no-unsafe-assignment': 'off', // TODO: disabled
        'ts/no-unsafe-call': 'off', // TODO: disabled
        'ts/no-unsafe-declaration-merging': 'error',
        'ts/no-unsafe-enum-comparison': 'error',
        'ts/no-unsafe-member-access': 'off', // TODO: disabled
        // 'ts/strict-boolean-expressions': 'error',
        'ts/no-unsafe-unary-minus': 'error',
        'ts/no-unused-expressions': 'error',
        'ts/no-unused-vars': ['error', {
          args: 'none',
          caughtErrors: 'none',
          ignoreRestSiblings: true,
          vars: 'all',
        }],
        'ts/no-useless-constructor': 'error',
        'ts/no-useless-empty-export': 'error',
        'ts/no-useless-template-literals': 'error',
        'ts/no-var-requires': 'off',
        'ts/non-nullable-type-assertion-style': 'error',
        'ts/parameter-properties': 'error',
        'ts/prefer-as-const': 'error',
        // 'ts/prefer-destructuring': 'error',
        'ts/prefer-enum-initializers': 'error',
        'ts/prefer-for-of': 'error',
        'ts/prefer-function-type': 'off',
        // 'prefer-destructuring': 'off',
        'ts/prefer-literal-enum-member': 'error',
        'ts/prefer-namespace-keyword': 'error',
        'ts/prefer-nullish-coalescing': 'off', // TODO: enable?
        'ts/prefer-optional-chain': 'error',
        'ts/prefer-readonly': 'error',
        'ts/prefer-readonly-parameter-types': 'off', // TODO: enable?
        'ts/prefer-reduce-type-parameter': 'error',
        'ts/prefer-regexp-exec': 'error',
        'ts/prefer-return-this-type': 'error',
        'ts/prefer-string-starts-ends-with': 'error',
        'ts/promise-function-async': 'error',
        'ts/require-array-sort-compare': 'error',
        'ts/require-await': 'error',
        // 'ts/switch-exhaustiveness-check': 'error',
        'ts/sort-type-constituents': 'error',
        'ts/typedef': 'off',
        'ts/unified-signatures': 'off', // TODO: enable?
      },
      tsconfigPath,
    },
  }, {
    // import
    // rules: {
    //   'i/extensions': ['error', 'always'],
    // },
  }, {
    // node
    rules: {
      'node/file-extension-in-import': ['error', 'always'],
    },
  }, {
    // unicorn
    rules: {
      // 'unicorn/expiring-todo-comments': 'off',
      // 'filename-case': 'off',
      // 'import-style': 'off',
      // 'no-empty-file': 'off',
      // 'no-keyword-prefix': 'off',
      // 'no-lonely-if': 'off',
      // 'no-negated-condition': 'off',
      // 'no-nested-ternary': 'off',
      // 'no-null': 'off',
      // 'no-unused-properties': 'off',
      // 'no-useless-undefined': 'off',
      // 'prefer-add-event-listener': 'off',
      // 'prefer-module': 'off',
      // 'prefer-native-coercion-functions': 'off',
      // 'prevent-abbreviations': 'off',
      // 'unicorn/no-process-exit': 'error',

      'unicorn/better-regex': 'error',
      'unicorn/catch-error-name': 'error',
      // -----

      'unicorn/consistent-destructuring': 'error',
      'unicorn/consistent-function-scoping': 'error',
      'unicorn/custom-error-definition': 'error',
      'unicorn/empty-brace-spaces': 'error',
      'unicorn/explicit-length-check': 'error',
      'unicorn/new-for-builtins': 'error',
      'unicorn/no-array-callback-reference': 'off', // TODO: enable?
      'unicorn/no-array-for-each': 'error',
      'unicorn/no-array-method-this-argument': 'error',
      'unicorn/no-array-push-push': 'error',
      'unicorn/no-array-reduce': 'error',
      'unicorn/no-await-expression-member': 'error',
      'unicorn/no-console-spaces': 'error',
      'unicorn/no-document-cookie': 'error',
      'unicorn/no-for-loop': 'error',
      'unicorn/no-hex-escape': 'error',
      'unicorn/no-invalid-remove-event-listener': 'error',
      'unicorn/no-object-as-default-parameter': 'error',
      'unicorn/no-static-only-class': 'error',
      'unicorn/no-thenable': 'error',
      'unicorn/no-this-assignment': 'error',
      'unicorn/no-typeof-undefined': 'error',
      'unicorn/no-unnecessary-await': 'error',
      'unicorn/no-unreadable-array-destructuring': 'error',
      'unicorn/no-useless-fallback-in-spread': 'error',
      'unicorn/no-useless-length-check': 'error',
      'unicorn/no-useless-promise-resolve-reject': 'error',
      'unicorn/no-useless-spread': 'error',
      'unicorn/no-useless-switch-case': 'error',
      'unicorn/no-zero-fractions': 'error',
      'unicorn/numeric-separators-style': 'error',
      'unicorn/prefer-array-find': 'error',
      'unicorn/prefer-array-flat': 'error',
      'unicorn/prefer-array-flat-map': 'error',
      'unicorn/prefer-array-index-of': 'error',
      'unicorn/prefer-array-some': 'error',
      'unicorn/prefer-at': 'error',
      'unicorn/prefer-blob-reading-methods': 'error',
      'unicorn/prefer-code-point': 'error',
      'unicorn/prefer-date-now': 'error',
      'unicorn/prefer-default-parameters': 'error',
      'unicorn/prefer-dom-node-append': 'error',
      'unicorn/prefer-dom-node-dataset': 'error',
      'unicorn/prefer-dom-node-remove': 'error',
      'unicorn/prefer-event-target': 'error',
      'unicorn/prefer-export-from': 'error',
      'unicorn/prefer-json-parse-buffer': 'error',
      'unicorn/prefer-keyboard-event-key': 'error',
      'unicorn/prefer-logical-operator-over-ternary': 'error',
      'unicorn/prefer-math-trunc': 'error',
      'unicorn/prefer-modern-dom-apis': 'error',
      'unicorn/prefer-modern-math-apis': 'error',
      'unicorn/prefer-negative-index': 'error',
      'unicorn/prefer-object-from-entries': 'error',
      'unicorn/prefer-optional-catch-binding': 'error',
      'unicorn/prefer-prototype-methods': 'error',
      'unicorn/prefer-query-selector': 'error',
      'unicorn/prefer-reflect-apply': 'error',
      'unicorn/prefer-regexp-test': 'error',
      'unicorn/prefer-set-has': 'error',
      'unicorn/prefer-set-size': 'error',
      'unicorn/prefer-spread': 'error',
      'unicorn/prefer-string-replace-all': 'error',
      'unicorn/prefer-string-slice': 'error',
      'unicorn/prefer-string-trim-start-end': 'error',
      'unicorn/prefer-switch': 'error',
      'unicorn/prefer-ternary': 'error',
      'unicorn/prefer-top-level-await': 'error',
      'unicorn/relative-url-style': 'error',
      'unicorn/require-array-join-separator': 'error',
      'unicorn/require-number-to-fixed-digits-argument': 'error',
      'unicorn/require-post-message-target-origin': 'error',
      'unicorn/string-content': 'error',
      'unicorn/switch-case-braces': 'error',
      'unicorn/template-indent': 'error',
      'unicorn/text-encoding-identifier-case': 'error',
    },
  }, test({
    files: [
      `**/__tests__/**/*.${GLOB_SRC_EXT}`,
      `**/*.spec.${GLOB_SRC_EXT}`,
      `**/*.test.${GLOB_SRC_EXT}`,
      `**/*.bench.${GLOB_SRC_EXT}`,
      `**/*.benchmark.${GLOB_SRC_EXT}`,
    ],
    isInEditor: !!((process.env.VSCODE_PID || process.env.JETBRAINS_IDE || process.env.VIM) && !process.env.CI),
  }), {
    files: [
      // `**/e2e/**/*.${GLOB_SRC_EXT}`,
      `**/e2e/**/*.spec.${GLOB_SRC_EXT}`,
      `**/e2e/**/*.test.${GLOB_SRC_EXT}`,
      `**/e2e/**/*.bench.${GLOB_SRC_EXT}`,
      `**/e2e/**/*.benchmark.${GLOB_SRC_EXT}`,
    ],
    name: 'antfu:playwright',
    ...pluginPlaywright.configs['flat/recommended'],
  }, {
    files: ['**/*.ts', '**/*.js'],
    rules: {
      'dot-notation': 'off',
    },
  }, {
    files: ['**/*.ts'],
    rules: {
      'perfectionist/sort-objects': 'error',
    },
  }, {
    files: [
        `**/__tests__/**/*.${GLOB_SRC_EXT}`,
        `**/*.spec.${GLOB_SRC_EXT}`,
        `**/*.test.${GLOB_SRC_EXT}`,
        `**/*.bench.${GLOB_SRC_EXT}`,
        `**/*.benchmark.${GLOB_SRC_EXT}`,
    ],
    rules: {
      'ts/no-loop-func': 'off',
    },
  })

  return result
}
